apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: infra-mind
  labels:
    app: mongodb
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: infra-mind-secrets
              key: MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: infra-mind-secrets
              key: MONGO_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "infra_mind"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: infra-mind
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: infra-mind
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-scripts
  namespace: infra-mind
data:
  init-mongo.js: |
    // Initialize Infra Mind database
    db = db.getSiblingDB('infra_mind');
    
    // Create collections with validation
    db.createCollection('assessments', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['user_id', 'status', 'created_at'],
          properties: {
            user_id: { bsonType: 'string' },
            status: { enum: ['pending', 'in_progress', 'completed', 'failed'] },
            created_at: { bsonType: 'date' }
          }
        }
      }
    });
    
    db.createCollection('recommendations');
    db.createCollection('reports');
    db.createCollection('users');
    db.createCollection('metrics');
    db.createCollection('workflow_states');
    db.createCollection('web_research_data');
    
    // Create indexes for performance
    db.assessments.createIndex({ 'user_id': 1, 'status': 1 });
    db.assessments.createIndex({ 'created_at': -1 });
    db.recommendations.createIndex({ 'assessment_id': 1, 'agent_name': 1 });
    db.recommendations.createIndex({ 'confidence_score': -1 });
    db.reports.createIndex({ 'assessment_id': 1, 'report_type': 1 });
    db.reports.createIndex({ 'created_at': -1 });
    db.users.createIndex({ 'email': 1 }, { unique: true });
    db.metrics.createIndex({ 'metric_name': 1, 'timestamp': -1 });
    db.workflow_states.createIndex({ 'assessment_id': 1, 'workflow_id': 1 });
    db.web_research_data.createIndex({ 'source_type': 1, 'provider': 1 });
    db.web_research_data.createIndex({ 'last_scraped': -1 });
    db.web_research_data.createIndex({ 'content_hash': 1 }, { unique: true });
    
    print('Infra Mind database initialized successfully');