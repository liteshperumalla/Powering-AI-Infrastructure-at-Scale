# Production Docker Compose configuration for Infra Mind
# Learning Note: Separate production config for security and performance

version: '3.8'

services:
  # MongoDB database with production security
  mongodb:
    image: mongo:7.0
    container_name: infra_mind_mongodb_prod
    restart: always
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: infra_mind
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./k8s/mongodb-config.yaml:/etc/mongo/mongod.conf:ro
    command: ["mongod", "--config", "/etc/mongo/mongod.conf"]
    networks:
      - infra_mind_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Redis cache with production security and performance
  redis:
    image: redis:7.2-alpine
    container_name: infra_mind_redis_prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
      --tcp-backlog 511
      --maxclients 10000
      --loglevel notice
      --protected-mode yes
      --bind 0.0.0.0
      --port 6379
      --databases 16
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - infra_mind_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "999:999"  # Redis user

  # Redis Sentinel for high availability (optional)
  redis-sentinel:
    image: redis:7.2-alpine
    container_name: infra_mind_redis_sentinel
    restart: always
    ports:
      - "26379:26379"
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel announce-ip ${REDIS_SENTINEL_IP:-127.0.0.1}
      --sentinel announce-port 26379
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - infra_mind_network
    depends_on:
      - redis
    profiles:
      - ha  # Only start with: docker-compose -f docker-compose.prod.yml --profile ha up
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI application with production security
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    image: infra-mind-api:${VERSION:-latest}
    container_name: infra_mind_api_prod
    restart: always
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only
    environment:
      # Database configuration
      INFRA_MIND_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/infra_mind?authSource=admin&ssl=false&retryWrites=true&w=majority
      INFRA_MIND_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application configuration
      INFRA_MIND_ENVIRONMENT: production
      INFRA_MIND_DEBUG: "false"
      INFRA_MIND_SECRET_KEY: ${SECRET_KEY}
      INFRA_MIND_LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Security configuration
      INFRA_MIND_JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INFRA_MIND_JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      INFRA_MIND_JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-30}
      INFRA_MIND_ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # LLM configuration
      INFRA_MIND_OPENAI_API_KEY: ${OPENAI_API_KEY}
      INFRA_MIND_ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      INFRA_MIND_LLM_MODEL: ${LLM_MODEL:-gpt-4}
      INFRA_MIND_LLM_TEMPERATURE: ${LLM_TEMPERATURE:-0.1}
      INFRA_MIND_LLM_MAX_TOKENS: ${LLM_MAX_TOKENS:-4000}
      
      # Cloud provider configuration
      INFRA_MIND_AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      INFRA_MIND_AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      INFRA_MIND_AWS_REGION: ${AWS_REGION:-us-east-1}
      INFRA_MIND_AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      INFRA_MIND_AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      INFRA_MIND_AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      INFRA_MIND_GCP_SERVICE_ACCOUNT_PATH: ${GCP_SERVICE_ACCOUNT_PATH}
      INFRA_MIND_GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      
      # API configuration
      INFRA_MIND_API_HOST: 0.0.0.0
      INFRA_MIND_API_PORT: 8000
      INFRA_MIND_CORS_ORIGINS: ${CORS_ORIGINS}
      INFRA_MIND_ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # Rate limiting and performance
      INFRA_MIND_RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-1000}
      INFRA_MIND_RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-3600}
      INFRA_MIND_MAX_WORKERS: ${MAX_WORKERS:-4}
      INFRA_MIND_WORKER_CONNECTIONS: ${WORKER_CONNECTIONS:-1000}
      
      # Monitoring and observability
      INFRA_MIND_METRICS_ENABLED: ${METRICS_ENABLED:-true}
      INFRA_MIND_TRACING_ENABLED: ${TRACING_ENABLED:-true}
      INFRA_MIND_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ${GCP_SERVICE_ACCOUNT_PATH:-/dev/null}:${GCP_SERVICE_ACCOUNT_PATH:-/dev/null}:ro
      - api_cache:/app/cache
    networks:
      - infra_mind_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # React Frontend with production optimizations
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    image: infra-mind-frontend:${VERSION:-latest}
    container_name: infra_mind_frontend_prod
    restart: always
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    environment:
      NEXT_PUBLIC_API_URL: ${FRONTEND_API_URL}
      NEXT_PUBLIC_WS_URL: ${FRONTEND_WS_URL}
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - frontend_cache:/app/.next/cache
    networks:
      - infra_mind_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: infra_mind_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - infra_mind_network
    profiles:
      - nginx  # Only start with: docker-compose -f docker-compose.prod.yml --profile nginx up
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: infra_mind_prometheus_prod
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - infra_mind_network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: infra_mind_grafana_prod
    restart: always
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - infra_mind_network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: infra_mind_loki_prod
    restart: always
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - infra_mind_network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Backup service
  backup:
    image: alpine:latest
    container_name: infra_mind_backup_prod
    restart: "no"
    volumes:
      - mongodb_data:/backup/mongodb:ro
      - redis_data:/backup/redis:ro
      - ./backups:/backups
      - ./scripts/backup_restore.py:/backup_restore.py:ro
    command: |
      sh -c "
        apk add --no-cache python3 py3-pip mongodb-tools redis &&
        python3 /backup_restore.py backup
      "
    networks:
      - infra_mind_network
    profiles:
      - backup
    depends_on:
      - mongodb
      - redis

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  api_cache:
    driver: local
  frontend_cache:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Custom network for service communication
networks:
  infra_mind_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16