[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "infra-mind"
version = "0.1.0"
description = "AI-powered infrastructure advisory platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Infra Mind Team", email = "team@inframind.ai"},
]
keywords = ["ai", "infrastructure", "cloud", "advisory", "agents"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database
    "motor>=3.3.0",  # Async MongoDB driver
    "beanie>=1.23.0",  # Async ODM for MongoDB
    
    # Caching and Sessions
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    
    # AI and Agents
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langgraph>=0.0.20",
    "openai>=1.0.0",
    "google-generativeai>=0.3.0",  # Google Gemini API
    
    # Cloud APIs
    "boto3>=1.34.0",  # AWS SDK
    "azure-mgmt-compute>=30.0.0",  # Azure Compute
    "azure-mgmt-storage>=21.0.0",  # Azure Storage
    "azure-mgmt-sql>=3.0.0",  # Azure SQL
    "azure-mgmt-resource>=23.0.0",  # Azure Resource Manager
    "azure-mgmt-monitor>=6.0.0",  # Azure Monitor
    "azure-mgmt-costmanagement>=4.0.0",  # Azure Cost Management
    "azure-mgmt-containerservice>=29.0.0",  # Azure AKS
    "azure-mgmt-machinelearningservices>=1.0.0",  # Azure ML
    "azure-mgmt-recoveryservices>=2.4.0",  # Azure Backup
    "azure-identity>=1.15.0",  # Azure Auth
    "google-cloud-billing>=1.12.0",  # GCP Billing
    "google-cloud-compute>=1.15.0",  # GCP Compute
    "cloud-sql-python-connector[pymysql]>=1.0.0",  # GCP Cloud SQL
    "google-cloud-asset>=3.20.0",  # GCP Asset Inventory
    "google-cloud-recommender>=2.11.0",  # GCP Recommender
    "google-cloud-container>=2.17.0",  # GCP GKE
    "google-cloud-aiplatform>=1.38.0",  # GCP Vertex AI
    "google-auth>=2.23.0",  # GCP Authentication
    "google-api-core>=2.11.0",  # GCP API Core
    
    # IBM Cloud SDKs
    "ibm-cloud-sdk-core>=3.18.0",  # IBM Cloud Core SDK
    "ibm-platform-services>=0.50.0",  # IBM Platform Services
    "ibm-vpc>=0.15.0",  # IBM VPC
    "ibm-watson>=7.0.0",  # IBM Watson for AI services
    
    # Alibaba Cloud SDKs
    "alibabacloud_ecs20140526>=3.0.0",  # Alibaba ECS
    "alibabacloud_rds20140815>=3.0.0",  # Alibaba RDS
    "alibabacloud_oss20190517>=1.0.0",  # Alibaba Object Storage
    "alibabacloud_vpc20160428>=3.0.0",  # Alibaba VPC
    "alibabacloud_tea_openapi>=0.3.0",  # Alibaba OpenAPI Core
    
    "tenacity>=8.2.0",  # Retry logic
    
    # Data Processing
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",  # Async HTTP client
    "numpy>=1.24.0",  # Mathematical operations
    "scipy>=1.11.0",  # Scientific computing
    
    # Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.0.0",
    "python-multipart>=0.0.6",
    
    # Email Services
    "fastapi-mail>=1.4.1",  # Email sending
    "aiosmtplib>=3.0.0",  # Async SMTP
    "email-validator>=2.1.0",  # Email validation
    
    # Multi-Factor Authentication
    "pyotp>=2.9.0",  # TOTP/HOTP implementation
    "qrcode[pil]>=7.4.2",  # QR code generation for MFA setup
    
    # PDF Generation
    "reportlab>=4.0.0",  # PDF generation
    "Pillow>=10.0.0",  # Image processing for PDFs
    
    # Utilities
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "typer>=0.9.0",
    "psutil>=5.9.0",  # System monitoring
    "watchdog>=2.2.0", # For log monitoring
    "beautifulsoup4>=4.12.0", # For web scraping
    "ddgs>=4.0.0", # For web search API (renamed from duckduckgo-search)
    "google-search-results>=2.4.0", # For Google Search API (SerpAPI)
    "tavily-python>=0.3.0", # For Tavily Search API
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/inframind/infra-mind"
Documentation = "https://docs.inframind.ai"
Repository = "https://github.com/inframind/infra-mind"
Issues = "https://github.com/inframind/infra-mind/issues"

[project.scripts]
infra-mind = "infra_mind.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/infra_mind"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["infra_mind"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "motor.*",
    "beanie.*",
    "langchain.*",
    "langgraph.*",
]
ignore_missing_imports = true